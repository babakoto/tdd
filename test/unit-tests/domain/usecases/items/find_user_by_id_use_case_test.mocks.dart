// Mocks generated by Mockito 5.1.0 from annotations
// in clean_tdd_bloc/test/unit-tests/domain/usecases/items/find_user_by_id_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:clean_tdd_bloc/core/core.dart' as _i2;
import 'package:clean_tdd_bloc/domain/entities/item_entity.dart' as _i5;
import 'package:clean_tdd_bloc/domain/repositories/item_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResult_0<E, S> extends _i1.Fake implements _i2.Result<E, S> {}

/// A class which mocks [ItemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRepository extends _i1.Mock implements _i3.ItemRepository {
  MockItemRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i2.Failure, List<_i5.ItemEntity>>>
      findItems() => (super.noSuchMethod(Invocation.method(#findItems, []),
              returnValue:
                  Future<_i2.Result<_i2.Failure, List<_i5.ItemEntity>>>.value(
                      _FakeResult_0<_i2.Failure, List<_i5.ItemEntity>>()))
          as _i4.Future<_i2.Result<_i2.Failure, List<_i5.ItemEntity>>>);
  @override
  _i4.Future<_i2.Result<_i2.Failure, _i5.ItemEntity>> findItemById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#findItemById, [], {#id: id}),
          returnValue: Future<_i2.Result<_i2.Failure, _i5.ItemEntity>>.value(
              _FakeResult_0<_i2.Failure, _i5.ItemEntity>())) as _i4
          .Future<_i2.Result<_i2.Failure, _i5.ItemEntity>>);
}
